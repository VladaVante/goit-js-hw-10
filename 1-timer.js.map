{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst dateInput = document.querySelector(\"input#datetime-picker\");\nconst startButton = document.querySelector(\"[data-start]\");\nconsole.log(\"ðŸš€ ~ startButton:\", startButton)\nlet countdownInterval;\n\n\nflatpickr(dateInput, {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\nonClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const now = new Date();\n\n    if (selectedDate <= now) {\n    iziToast.error({\n        message: \"Please choose a date in the future\",\n    });\n    startButton.disabled = true;\n    } else {\n    startButton.disabled = false;\n    }\n},\n});\n\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, \"0\");\n}\n\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n    document.querySelector(\"[data-days]\").textContent = addLeadingZero(days);\n    document.querySelector(\"[data-hours]\").textContent = addLeadingZero(hours);\n    document.querySelector(\"[data-minutes]\").textContent = addLeadingZero(minutes);\n    document.querySelector(\"[data-seconds]\").textContent = addLeadingZero(seconds);\n}\n\nstartButton.addEventListener(\"click\", () => {\nconst selectedDate = new Date(dateInput.value);\n    startButton.disabled = true;\n    dateInput.disabled = true;\n\ncountdownInterval = setInterval(() => {\n    const now = new Date();\n    const timeRemaining = selectedDate - now;\n\n    if (timeRemaining <= 0) {\n    clearInterval(countdownInterval);\n    updateTimer({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n    dateInput.disabled = false;\n    return;\n    }\n\n    const timeComponents = convertMs(timeRemaining);\n    updateTimer(timeComponents);\n}, 1000);\n});"],"names":["dateInput","startButton","countdownInterval","flatpickr","selectedDates","iziToast","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","updateTimer","selectedDate","timeRemaining","timeComponents"],"mappings":"sGAMA,MAAMA,EAAY,SAAS,cAAc,uBAAuB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACzD,QAAQ,IAAI,oBAAqBA,CAAW,EAC5C,IAAIC,EAGJC,EAAUH,EAAW,CACjB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACrB,QAAQI,EAAe,CACEA,EAAc,CAAC,GACxB,IAAI,MAGhBC,EAAS,MAAM,CACX,QAAS,oCACjB,CAAK,EACDJ,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE3B,CACA,CAAC,EAGD,SAASK,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAGA,SAASC,EAAUC,EAAI,CAMnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASC,EAAY,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACpD,SAAS,cAAc,aAAa,EAAE,YAAcP,EAAeI,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcJ,EAAeK,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcL,EAAeM,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcN,EAAeO,CAAO,CACjF,CAEAZ,EAAY,iBAAiB,QAAS,IAAM,CAC5C,MAAMc,EAAe,IAAI,KAAKf,EAAU,KAAK,EACzCC,EAAY,SAAW,GACvBD,EAAU,SAAW,GAEzBE,EAAoB,YAAY,IAAM,CAElC,MAAMc,EAAgBD,EADV,IAAI,KAGhB,GAAIC,GAAiB,EAAG,CACxB,cAAcd,CAAiB,EAC/BY,EAAY,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACzDd,EAAU,SAAW,GACrB,MACC,CAED,MAAMiB,EAAiBT,EAAUQ,CAAa,EAC9CF,EAAYG,CAAc,CAC9B,EAAG,GAAI,CACP,CAAC"}